name: CI

on:
  push:
    branches: [main, stage, test]
  pull_request:
    branches: [main, stage, test]
    types: [opened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: >-
    ${{ contains('["main", "stage", "test"]', github.ref_name) }}

jobs:
  lints:
    name: Lint ${{ matrix.linter }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        linter: [ts, biome]
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        id: config
        shell: bash
        run: echo "pnpm_store_path=$(pnpm store path --silent)" >>$GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.config.outputs.pnpm_store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i --frozen-lockfile --ignore-scripts

      - name: Run ${{ matrix.linter }} linter
        run: pnpm ${{ matrix.linter }}:check

  prepare:
    name: Prepare for build
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: github.event_name != 'pull_request'
    outputs:
      version: ${{ steps.check_version.outputs.version }}
      changed: ${{ steps.check_version.outputs.changed }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Check for version change
        id: check_version
        run: |
          git fetch origin main
          LAST_VERSION=$(git log -1 --pretty=format:%H -- package.json)
          CURRENT_VERSION=$(cat package.json | jq -r .version)

          if [ "$LAST_VERSION" != "$(git show $LAST_VERSION:package.json |
            jq -r .version)" ]; then
            echo 'Version has changed.'
            echo "version=$CURRENT_VERSION" >>$GITHUB_OUTPUT
            echo 'changed=true' >>$GITHUB_OUTPUT
          else
            echo 'Version has not changed.'
            echo 'changed=false' >>$GITHUB_OUTPUT
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [prepare, lints]
    env:
      REGISTRY: ghcr.io/${{ github.repository }}
      VERSION: ${{ needs.prepare.outputs.version }}
      RELEASE: ${{ needs.prepare.outputs.changed }}
      BRANCH: ${{ github.ref_name }}
    steps:
      - name: Login to private docker registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Git checkout
        uses: actions/checkout@v4

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up docker qemu
        uses: docker/setup-qemu-action@v3

      - name: Build and ${{ env.RELEASE == true && 'Release' || 'Cache' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: |
            ${{ env.REGISTRY }}:latest
            ${{ env.REGISTRY }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}:${{ env.BRANCH }}
            ${{ env.REGISTRY }}:${{ env.BRANCH }}-${{ env.VERSION }}

          outputs: ${{ env.REGISTRY && 'type=registry' || 'type=cacheonly' }}
          push: ${{ env.RELEASE }}
          platforms: linux/amd64,linux/arm64
          cache-to: |
            type=gha,scope=${{ github.repository_id }}-${{env.VERSION}},mode=min
            type=gha,scope=${{ github.repository_id }},mode=min
          cache-from: |
            type=gha,scope=${{ github.repository_id }}-${{env.VERSION}}
            type=gha,scope=${{ github.repository_id }}
